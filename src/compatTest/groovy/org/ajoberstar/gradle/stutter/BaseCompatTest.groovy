package org.ajoberstar.gradle.stutter

import spock.lang.Specification
import spock.lang.Unroll

import org.gradle.util.GradleVersion
import org.gradle.testkit.runner.GradleRunner
import org.gradle.testkit.runner.BuildResult
import org.gradle.testkit.runner.TaskOutcome
import org.junit.Rule
import org.junit.rules.TemporaryFolder

class BaseCompatTest extends Specification {
  @Rule TemporaryFolder tempDir = new TemporaryFolder()
  File projectDir
  File buildFile
  List compatTestTasks

  def setup() {
    projectDir = tempDir.newFolder('project')
    buildFile = projectFile('build.gradle')
    buildFile << """\
plugins {
  id 'org.ajoberstar.stutter'
  id 'java'
}

stutter {
  java(8) {
    compatibleRange '3.0', '4.0'
  }
  java(9) {
    compatibleRange '4.0', '4.3'
    incompatible '4.2'
  }
}
"""

    // check if Java 9+ (to test the Java 8 lock vs Java 9 lock)
    if (Runtime.metaClass.respondsTo(Runtime, 'version')) {
      compatTestTasks = [':compatTest4.0', ':compatTest4.0.1', ':compatTest4.0.2', ':compatTest4.1', ':compatTest4.2.1']
    } else {
      compatTestTasks = [':compatTest3.0', ':compatTest3.1', ':compatTest3.2', ':compatTest3.2.1', ':compatTest3.3', ':compatTest3.4', ':compatTest3.4.1', ':compatTest3.5', ':compatTest3.5.1']
    }
  }

  def 'without lock files no tasks are available'() {
    when:
    def result = buildAndFail('compatTest')
    then:
    result.tasks.collect { it.path } == [':compatTest']
    result.task(':compatTest').outcome == TaskOutcome.FAILED
    result.output.contains('No versions found to test.')
  }

  def 'can generate valid lock files'() {
    when:
    def result = build('stutterWriteLocks')
    then:
    result.task(':stutterWriteLocks').outcome == TaskOutcome.SUCCESS
    projectFile('.stutter/java8.lock').text.normalize() == '''\
# DO NOT MODIFY: Generated by Stutter plugin.
3.0
3.1
3.2
3.2.1
3.3
3.4
3.4.1
3.5
3.5.1
'''
    projectFile('.stutter/java9.lock').text.normalize() == '''\
# DO NOT MODIFY: Generated by Stutter plugin.
4.0
4.0.1
4.0.2
4.1
4.2.1
'''
  }

  def 'lock files result in tasks for each version'() {
    given:
    build('stutterWriteLocks')
    when:
    def result = build('compatTest')
    then:
    result.task(':compatTest').outcome == TaskOutcome.UP_TO_DATE
    compatTestTasks.each {
      assert result.task(it).outcome == TaskOutcome.NO_SOURCE
    }
  }

  def 'ensure compatTest runs after test'() {
    given:
    build('stutterWriteLocks')
    when:
    def result = build('compatTest', 'test')
    def taskOrder = result.tasks.collect { it.path }.findAll { (it.startsWith(':test') || it.startsWith(':compatTest')) && !it.endsWith('Classes') }
    println taskOrder
    then:
    taskOrder == [':test', compatTestTasks, ':compatTest'].flatten()
  }

  def 'modified runtimeClasspath is respected'() {
    given:
    projectFile('build.gradle') << '''\
sourceSets {
  compatTest.runtimeClasspath = files()
}

repositories {
  mavenCentral()
}

dependencies {
  compatTestImplementation gradleTestKit()
  compatTestImplementation 'junit:junit:4.12'
}
'''
    projectFile('src/compatTest/java/org/ajoberstar/Example.java') << '''\
package org.ajoberstar;

import org.gradle.testkit.runner.TaskOutcome;
import org.junit.Test;

public class Example {
  @Test
  public void test() {
    System.out.println(TaskOutcome.SUCCESS);
  }
}
'''
    build('stutterWriteLocks')
    when:
    def result = buildAndFail('compatTest')
    then:
    result.task(':compileCompatTestJava').outcome == TaskOutcome.SUCCESS
    result.task(compatTestTasks[0]).outcome == TaskOutcome.FAILED
  }

  private BuildResult build(String... args = []) {
    return GradleRunner.create()
      .withGradleVersion(System.properties['compat.gradle.version'])
      .withPluginClasspath()
      .withProjectDir(projectDir)
      .forwardOutput()
      .withArguments((args + '--stacktrace') as String[])
      .build()
  }

  private BuildResult buildAndFail(String... args = []) {
    return GradleRunner.create()
      .withGradleVersion(System.properties['compat.gradle.version'])
      .withPluginClasspath()
      .withProjectDir(projectDir)
      .forwardOutput()
      .withArguments((args + '--stacktrace') as String[])
      .buildAndFail()
  }

  private File projectFile(String path) {
    File file = new File(projectDir, path)
    file.parentFile.mkdirs()
    return file
  }
}
